namespace uwap.WebFramework.Plugins;

public partial class ServerPlugin : Plugin
{
    public override byte[]? GetFile(string relPath, string pathPrefix, string domain)
        => relPath switch
        {
            "/backup.js" => System.Text.Encoding.UTF8.GetBytes($"async function BackupNow(fresh) {{\r\n    var warning = document.querySelector(\"#backup-running\");\r\n    warning.style.removeProperty(\"display\");\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/backups/new?fresh=\" + fresh);\r\n        if (response.status === 200) {{\r\n            window.location.reload();\r\n            return;\r\n        }}\r\n    }} catch {{\r\n    }}\r\n    warning.style[\"display\"] = \"none\";\r\n    ShowError(\"Connection failed.\");\r\n}}\r\n\r\nasync function Restore(id) {{\r\n    var btn = document.querySelector(\"#restore-\" + id);\r\n    if (btn.innerText === \"Restore...\")\r\n        return;\r\n    if (btn.innerText !== \"Restore?\") {{\r\n        btn.innerText = \"Restore?\";\r\n        return;\r\n    }}\r\n    btn.innerText = \"Restore...\";\r\n    try {{\r\n        let response = await fetch(\"/api{pathPrefix}/backups/restore?id=\" + id);\r\n        if (response.status === 200) {{\r\n            window.location.reload();\r\n            return;\r\n        }}\r\n    }} catch {{\r\n    }}\r\n    btn.innerText = \"Restore :(\";\r\n    ShowError(\"Connection failed.\");\r\n}}"),
            "/icon.ico" => ServerPluginBeta.Properties.PluginFiles.L2ljb24uaWNv,
            "/icon.png" => ServerPluginBeta.Properties.PluginFiles.L2ljb24ucG5n,
            "/icon.svg" => ServerPluginBeta.Properties.PluginFiles.L2ljb24uc3Zn,
            "/log.js" => System.Text.Encoding.UTF8.GetBytes($"async function Clear() {{\r\n    let response = await fetch('/api{pathPrefix}/clear-log');\r\n    await response.text();\r\n    window.location.reload();\r\n}}"),
            "/manifest.json" => System.Text.Encoding.UTF8.GetBytes($"{{\r\n  \"name\": \"Manage {domain}\",\r\n  \"short_name\": \"Manage {domain}\",\r\n  \"start_url\": \"{(pathPrefix == "" ? "/" : pathPrefix)}\",\r\n  \"display\": \"minimal-ui\",\r\n  \"background_color\": \"#000000\",\r\n  \"theme_color\": \"#202024\",\r\n  \"orientation\": \"portrait-primary\",\r\n  \"icons\": [\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.svg\",\r\n      \"type\": \"image/svg+xml\",\r\n      \"sizes\": \"any\"\r\n    }},\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.png\",\r\n      \"type\": \"image/png\",\r\n      \"sizes\": \"512x512\"\r\n    }},\r\n    {{\r\n      \"src\": \"{pathPrefix}/icon.ico\",\r\n      \"type\": \"image/x-icon\",\r\n      \"sizes\": \"16x16 24x24 32x32 48x48 64x64 72x72 96x96 128x128 256x256\"\r\n    }}\r\n  ],\r\n  \"launch_handler\": {{\r\n    \"client_mode\": \"navigate-new\"\r\n  }},\r\n  \"related_applications\": [\r\n    {{\r\n      \"platform\": \"webapp\",\r\n      \"url\": \"{pathPrefix}/manifest.json\"\r\n    }}\r\n  ],\r\n  \"offline_enabled\": false,\r\n  \"omnibox\": {{\r\n    \"keyword\": \"server\"\r\n  }},\r\n  \"version\": \"1.0.0\"\r\n}}\r\n"),
            "/send-mail.js" => System.Text.Encoding.UTF8.GetBytes($"let to = document.querySelector(\"#to\");\r\nlet from = document.querySelector(\"#from\");\r\nlet subject = document.querySelector(\"#subject\");\r\nlet text = document.querySelector(\"#text\");\r\n\r\nasync function Send() {{\r\n    if (to.value === \"\" || from.value === \"\" || subject.value === \"\" || text.value === \"\") {{\r\n        ShowError(\"Fill out everything.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/send-mail?to=\" + encodeURIComponent(to.value) + \"&from=\" + encodeURIComponent(from.value) + \"&subject=\" + encodeURIComponent(subject.value) + \"&text=\" + encodeURIComponent(text.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            ShowError(text);\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/ssh-menu.js" => System.Text.Encoding.UTF8.GetBytes($"async function Disable(user) {{\r\n    let response = await fetch('/api{pathPrefix}/ssh/disable?user=' + user);\r\n    await response.text();\r\n    window.location.reload();\r\n}}\r\n\r\nasync function Enable(user) {{\r\n    let response = await fetch('/api{pathPrefix}/ssh/enable?user=' + user);\r\n    await response.text();\r\n    window.location.reload();\r\n}}\r\n\r\nasync function Block() {{\r\n    let response = await fetch('/api{pathPrefix}/ssh/block');\r\n    await response.text();\r\n    window.location.reload();\r\n}}\r\n\r\nasync function Change() {{\r\n    let response = await fetch('/api{pathPrefix}/ssh/change');\r\n    await response.text();\r\n    window.location.reload();\r\n}}\r\n\r\nasync function Allow() {{\r\n    let response = await fetch('/api{pathPrefix}/ssh/allow');\r\n    await response.text();\r\n    window.location.reload();\r\n}}"),
            "/ssh-user.js" => System.Text.Encoding.UTF8.GetBytes($"let to = document.querySelector(\"#to\");\r\nlet from = document.querySelector(\"#from\");\r\nlet subject = document.querySelector(\"#subject\");\r\nlet text = document.querySelector(\"#text\");\r\n\r\nfunction GetUser() {{\r\n    let query = new URLSearchParams(window.location.search);\r\n    return query.get(\"user\");\r\n}}\r\n\r\nasync function Enable() {{\r\n    let response = await fetch(\"/api{pathPrefix}/ssh/enable?user=\" + GetUser());\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        if (text === \"ok\") {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Disable() {{\r\n    let response = await fetch(\"/api{pathPrefix}/ssh/disable?user=\" + GetUser());\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        if (text === \"ok\") {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Delete(tbd) {{\r\n    let response = await fetch(\"/api{pathPrefix}/ssh/delete?user=\" + GetUser() + \"&pk=\" + tbd);\r\n    if (response.status === 200) {{\r\n        let text = await response.text();\r\n        if (text === \"ok\") {{\r\n            window.location.reload();\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }} else {{\r\n        ShowError(\"Connection failed.\");\r\n    }}\r\n}}\r\n\r\nasync function Add() {{\r\n    let pk = document.querySelector(\"#pk\");\r\n    if (pk.value === \"\") {{\r\n        ShowError(\"Enter a public key.\");\r\n    }} else {{\r\n        let response = await fetch(\"/api{pathPrefix}/ssh/add?user=\" + GetUser() + \"&pk=\" + encodeURIComponent(pk.value));\r\n        if (response.status === 200) {{\r\n            let text = await response.text();\r\n            if (text === \"ok\") {{\r\n                window.location.reload();\r\n            }} else {{\r\n                ShowError(\"Connection failed.\");\r\n            }}\r\n        }} else {{\r\n            ShowError(\"Connection failed.\");\r\n        }}\r\n    }}\r\n}}"),
            "/update.js" => System.Text.Encoding.UTF8.GetBytes($"async function Update() {{\r\n    HideError();\r\n    let file = document.getElementById('update-file').files[0];\r\n    let form = new FormData();\r\n    form.append('file', file);\r\n\r\n    let request = new XMLHttpRequest();\r\n    request.open('POST', '{pathPrefix}/update');\r\n    request.upload.addEventListener('progress', event => {{\r\n        document.querySelector('#updateButton').firstElementChild.innerText = 'Updating... ' + ((event.loaded / event.total) * 100).toFixed(2) + '%';\r\n    }});\r\n    request.onreadystatechange = () => {{\r\n        if (request.readyState == 4) {{\r\n            switch (request.status) {{\r\n                case 200:\r\n                    window.location.reload();\r\n                    break;\r\n                case 418:\r\n                    document.querySelector('#updateButton').firstElementChild.innerText = 'Update';\r\n                    ShowError(\"Invalid file!\");\r\n                    break;\r\n                case 503:\r\n                    document.querySelector('#updateButton').firstElementChild.innerText = 'Update';\r\n                    ShowError(\"This server can't be updated like this!\");\r\n                    break;\r\n                default:\r\n                    document.querySelector('#updateButton').firstElementChild.innerText = 'Update';\r\n                    ShowError(\"Error!\");\r\n                    break;\r\n            }}\r\n        }}\r\n    }};\r\n    request.send(form);\r\n}}"),
            _ => null
        };
    
    public override string? GetFileVersion(string relPath)
        => relPath switch
        {
            "/backup.js" => "638440765939758391",
            "/icon.ico" => "638397394010000000",
            "/icon.png" => "638397393150000000",
            "/icon.svg" => "638397393020000000",
            "/log.js" => "638295559870000000",
            "/manifest.json" => "638397493930000000",
            "/send-mail.js" => "638295523540000000",
            "/ssh-menu.js" => "638295561700000000",
            "/ssh-user.js" => "638295524140000000",
            "/update.js" => "638360143750000000",
            _ => null
        };
}
